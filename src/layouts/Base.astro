---
interface Props {
    title:string;
}


import Navbar from '../components/Navbar.astro';
---
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>My Astro try</title>
        <meta name="viewport" content="width=device-width initial-scale=1">
		<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    </head>

    <body>
        <Navbar />
		<slot />
    </body>
	
</html>

<style is:global>
	 @import url("https://fonts.googleapis.com/css2?family=Creepster&family=Nosifer&family=Noto+Sans:ital,wght@0,500;1,600&display=swap");
	:root {
		--max-width:  1920px;
		--height: calc(100vh - 60px);
		--max-height: 1080px;
		--navbar-height: 60px;
		scroll-padding-top: calc(var(--navbar-height) + 10px);
		scroll-behavior: smooth;

		--color-red: red;
		--color-black: black;
		--color-white: #ffffff;
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: var(--color-white);
		overflow-x: hidden;
	}
	body, main{
		margin: 0 auto;
		max-width: var(--max-width);
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}

	/* OBSERVER STYLES */
  
	.hide{
        opacity: 0;
        filter: blur(5px);
        transform: translateX(100%);
        transition: all 2s;
        margin-bottom: 100px;
    }

	.hide:nth-of-type(even) {
		transform: translateX(-100%);
       
	}
    .show{
        opacity: 1;
        filter: blur(0);
        transform: translateX(0)!important;

        }
   
/* About section icons animation*/
        .paragraphs{
            display: flex;
        }
        .paragraphs img{
            margin-right: 20px;
        }

        .paragraphs img:nth-child(2){
            transition-delay: 300ms;

        }
        .paragraphs img:nth-child(3){
            transition-delay: 600ms;
        }
        .paragraphs img:nth-child(4){
            transition-delay: 900ms;
        }
        .paragraphs img:nth-child(5){
            transition-delay: 1200ms;
        }
</style>

<script>
	   const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            console.log(entry)
            if(entry.isIntersecting){
                entry.target.classList.add('show');
            } else {
                entry.target.classList.remove('show');
            }
        });
    })
    const hiddenElements = document.querySelectorAll('.hide');
    hiddenElements.forEach((el) => observer.observe(el));
</script>
